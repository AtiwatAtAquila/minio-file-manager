
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FileRolePermission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model FileRolePermission
 * 
 */
export type FileRolePermissionModel = runtime.Types.Result.DefaultSelection<Prisma.$FileRolePermissionPayload>

export type AggregateFileRolePermission = {
  _count: FileRolePermissionCountAggregateOutputType | null
  _min: FileRolePermissionMinAggregateOutputType | null
  _max: FileRolePermissionMaxAggregateOutputType | null
}

export type FileRolePermissionMinAggregateOutputType = {
  fileId: string | null
  roleName: string | null
  grantedAt: Date | null
  grantedBy: string | null
}

export type FileRolePermissionMaxAggregateOutputType = {
  fileId: string | null
  roleName: string | null
  grantedAt: Date | null
  grantedBy: string | null
}

export type FileRolePermissionCountAggregateOutputType = {
  fileId: number
  roleName: number
  grantedAt: number
  grantedBy: number
  _all: number
}


export type FileRolePermissionMinAggregateInputType = {
  fileId?: true
  roleName?: true
  grantedAt?: true
  grantedBy?: true
}

export type FileRolePermissionMaxAggregateInputType = {
  fileId?: true
  roleName?: true
  grantedAt?: true
  grantedBy?: true
}

export type FileRolePermissionCountAggregateInputType = {
  fileId?: true
  roleName?: true
  grantedAt?: true
  grantedBy?: true
  _all?: true
}

export type FileRolePermissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FileRolePermission to aggregate.
   */
  where?: Prisma.FileRolePermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileRolePermissions to fetch.
   */
  orderBy?: Prisma.FileRolePermissionOrderByWithRelationInput | Prisma.FileRolePermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FileRolePermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileRolePermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileRolePermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FileRolePermissions
  **/
  _count?: true | FileRolePermissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FileRolePermissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FileRolePermissionMaxAggregateInputType
}

export type GetFileRolePermissionAggregateType<T extends FileRolePermissionAggregateArgs> = {
      [P in keyof T & keyof AggregateFileRolePermission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFileRolePermission[P]>
    : Prisma.GetScalarType<T[P], AggregateFileRolePermission[P]>
}




export type FileRolePermissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FileRolePermissionWhereInput
  orderBy?: Prisma.FileRolePermissionOrderByWithAggregationInput | Prisma.FileRolePermissionOrderByWithAggregationInput[]
  by: Prisma.FileRolePermissionScalarFieldEnum[] | Prisma.FileRolePermissionScalarFieldEnum
  having?: Prisma.FileRolePermissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FileRolePermissionCountAggregateInputType | true
  _min?: FileRolePermissionMinAggregateInputType
  _max?: FileRolePermissionMaxAggregateInputType
}

export type FileRolePermissionGroupByOutputType = {
  fileId: string
  roleName: string
  grantedAt: Date
  grantedBy: string
  _count: FileRolePermissionCountAggregateOutputType | null
  _min: FileRolePermissionMinAggregateOutputType | null
  _max: FileRolePermissionMaxAggregateOutputType | null
}

type GetFileRolePermissionGroupByPayload<T extends FileRolePermissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FileRolePermissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FileRolePermissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FileRolePermissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FileRolePermissionGroupByOutputType[P]>
      }
    >
  >



export type FileRolePermissionWhereInput = {
  AND?: Prisma.FileRolePermissionWhereInput | Prisma.FileRolePermissionWhereInput[]
  OR?: Prisma.FileRolePermissionWhereInput[]
  NOT?: Prisma.FileRolePermissionWhereInput | Prisma.FileRolePermissionWhereInput[]
  fileId?: Prisma.UuidFilter<"FileRolePermission"> | string
  roleName?: Prisma.StringFilter<"FileRolePermission"> | string
  grantedAt?: Prisma.DateTimeFilter<"FileRolePermission"> | Date | string
  grantedBy?: Prisma.StringFilter<"FileRolePermission"> | string
  file?: Prisma.XOR<Prisma.FileScalarRelationFilter, Prisma.FileWhereInput>
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.RoleWhereInput>
}

export type FileRolePermissionOrderByWithRelationInput = {
  fileId?: Prisma.SortOrder
  roleName?: Prisma.SortOrder
  grantedAt?: Prisma.SortOrder
  grantedBy?: Prisma.SortOrder
  file?: Prisma.FileOrderByWithRelationInput
  role?: Prisma.RoleOrderByWithRelationInput
}

export type FileRolePermissionWhereUniqueInput = Prisma.AtLeast<{
  fileId_roleName?: Prisma.FileRolePermissionFileIdRoleNameCompoundUniqueInput
  AND?: Prisma.FileRolePermissionWhereInput | Prisma.FileRolePermissionWhereInput[]
  OR?: Prisma.FileRolePermissionWhereInput[]
  NOT?: Prisma.FileRolePermissionWhereInput | Prisma.FileRolePermissionWhereInput[]
  fileId?: Prisma.UuidFilter<"FileRolePermission"> | string
  roleName?: Prisma.StringFilter<"FileRolePermission"> | string
  grantedAt?: Prisma.DateTimeFilter<"FileRolePermission"> | Date | string
  grantedBy?: Prisma.StringFilter<"FileRolePermission"> | string
  file?: Prisma.XOR<Prisma.FileScalarRelationFilter, Prisma.FileWhereInput>
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.RoleWhereInput>
}, "fileId_roleName">

export type FileRolePermissionOrderByWithAggregationInput = {
  fileId?: Prisma.SortOrder
  roleName?: Prisma.SortOrder
  grantedAt?: Prisma.SortOrder
  grantedBy?: Prisma.SortOrder
  _count?: Prisma.FileRolePermissionCountOrderByAggregateInput
  _max?: Prisma.FileRolePermissionMaxOrderByAggregateInput
  _min?: Prisma.FileRolePermissionMinOrderByAggregateInput
}

export type FileRolePermissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.FileRolePermissionScalarWhereWithAggregatesInput | Prisma.FileRolePermissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.FileRolePermissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FileRolePermissionScalarWhereWithAggregatesInput | Prisma.FileRolePermissionScalarWhereWithAggregatesInput[]
  fileId?: Prisma.UuidWithAggregatesFilter<"FileRolePermission"> | string
  roleName?: Prisma.StringWithAggregatesFilter<"FileRolePermission"> | string
  grantedAt?: Prisma.DateTimeWithAggregatesFilter<"FileRolePermission"> | Date | string
  grantedBy?: Prisma.StringWithAggregatesFilter<"FileRolePermission"> | string
}

export type FileRolePermissionCreateInput = {
  grantedAt?: Date | string
  grantedBy: string
  file: Prisma.FileCreateNestedOneWithoutPermissionsInput
  role: Prisma.RoleCreateNestedOneWithoutFilePermissionsInput
}

export type FileRolePermissionUncheckedCreateInput = {
  fileId: string
  roleName: string
  grantedAt?: Date | string
  grantedBy: string
}

export type FileRolePermissionUpdateInput = {
  grantedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grantedBy?: Prisma.StringFieldUpdateOperationsInput | string
  file?: Prisma.FileUpdateOneRequiredWithoutPermissionsNestedInput
  role?: Prisma.RoleUpdateOneRequiredWithoutFilePermissionsNestedInput
}

export type FileRolePermissionUncheckedUpdateInput = {
  fileId?: Prisma.StringFieldUpdateOperationsInput | string
  roleName?: Prisma.StringFieldUpdateOperationsInput | string
  grantedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grantedBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FileRolePermissionCreateManyInput = {
  fileId: string
  roleName: string
  grantedAt?: Date | string
  grantedBy: string
}

export type FileRolePermissionUpdateManyMutationInput = {
  grantedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grantedBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FileRolePermissionUncheckedUpdateManyInput = {
  fileId?: Prisma.StringFieldUpdateOperationsInput | string
  roleName?: Prisma.StringFieldUpdateOperationsInput | string
  grantedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grantedBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FileRolePermissionListRelationFilter = {
  every?: Prisma.FileRolePermissionWhereInput
  some?: Prisma.FileRolePermissionWhereInput
  none?: Prisma.FileRolePermissionWhereInput
}

export type FileRolePermissionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FileRolePermissionFileIdRoleNameCompoundUniqueInput = {
  fileId: string
  roleName: string
}

export type FileRolePermissionCountOrderByAggregateInput = {
  fileId?: Prisma.SortOrder
  roleName?: Prisma.SortOrder
  grantedAt?: Prisma.SortOrder
  grantedBy?: Prisma.SortOrder
}

export type FileRolePermissionMaxOrderByAggregateInput = {
  fileId?: Prisma.SortOrder
  roleName?: Prisma.SortOrder
  grantedAt?: Prisma.SortOrder
  grantedBy?: Prisma.SortOrder
}

export type FileRolePermissionMinOrderByAggregateInput = {
  fileId?: Prisma.SortOrder
  roleName?: Prisma.SortOrder
  grantedAt?: Prisma.SortOrder
  grantedBy?: Prisma.SortOrder
}

export type FileRolePermissionCreateNestedManyWithoutFileInput = {
  create?: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutFileInput, Prisma.FileRolePermissionUncheckedCreateWithoutFileInput> | Prisma.FileRolePermissionCreateWithoutFileInput[] | Prisma.FileRolePermissionUncheckedCreateWithoutFileInput[]
  connectOrCreate?: Prisma.FileRolePermissionCreateOrConnectWithoutFileInput | Prisma.FileRolePermissionCreateOrConnectWithoutFileInput[]
  createMany?: Prisma.FileRolePermissionCreateManyFileInputEnvelope
  connect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
}

export type FileRolePermissionUncheckedCreateNestedManyWithoutFileInput = {
  create?: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutFileInput, Prisma.FileRolePermissionUncheckedCreateWithoutFileInput> | Prisma.FileRolePermissionCreateWithoutFileInput[] | Prisma.FileRolePermissionUncheckedCreateWithoutFileInput[]
  connectOrCreate?: Prisma.FileRolePermissionCreateOrConnectWithoutFileInput | Prisma.FileRolePermissionCreateOrConnectWithoutFileInput[]
  createMany?: Prisma.FileRolePermissionCreateManyFileInputEnvelope
  connect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
}

export type FileRolePermissionUpdateManyWithoutFileNestedInput = {
  create?: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutFileInput, Prisma.FileRolePermissionUncheckedCreateWithoutFileInput> | Prisma.FileRolePermissionCreateWithoutFileInput[] | Prisma.FileRolePermissionUncheckedCreateWithoutFileInput[]
  connectOrCreate?: Prisma.FileRolePermissionCreateOrConnectWithoutFileInput | Prisma.FileRolePermissionCreateOrConnectWithoutFileInput[]
  upsert?: Prisma.FileRolePermissionUpsertWithWhereUniqueWithoutFileInput | Prisma.FileRolePermissionUpsertWithWhereUniqueWithoutFileInput[]
  createMany?: Prisma.FileRolePermissionCreateManyFileInputEnvelope
  set?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  disconnect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  delete?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  connect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  update?: Prisma.FileRolePermissionUpdateWithWhereUniqueWithoutFileInput | Prisma.FileRolePermissionUpdateWithWhereUniqueWithoutFileInput[]
  updateMany?: Prisma.FileRolePermissionUpdateManyWithWhereWithoutFileInput | Prisma.FileRolePermissionUpdateManyWithWhereWithoutFileInput[]
  deleteMany?: Prisma.FileRolePermissionScalarWhereInput | Prisma.FileRolePermissionScalarWhereInput[]
}

export type FileRolePermissionUncheckedUpdateManyWithoutFileNestedInput = {
  create?: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutFileInput, Prisma.FileRolePermissionUncheckedCreateWithoutFileInput> | Prisma.FileRolePermissionCreateWithoutFileInput[] | Prisma.FileRolePermissionUncheckedCreateWithoutFileInput[]
  connectOrCreate?: Prisma.FileRolePermissionCreateOrConnectWithoutFileInput | Prisma.FileRolePermissionCreateOrConnectWithoutFileInput[]
  upsert?: Prisma.FileRolePermissionUpsertWithWhereUniqueWithoutFileInput | Prisma.FileRolePermissionUpsertWithWhereUniqueWithoutFileInput[]
  createMany?: Prisma.FileRolePermissionCreateManyFileInputEnvelope
  set?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  disconnect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  delete?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  connect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  update?: Prisma.FileRolePermissionUpdateWithWhereUniqueWithoutFileInput | Prisma.FileRolePermissionUpdateWithWhereUniqueWithoutFileInput[]
  updateMany?: Prisma.FileRolePermissionUpdateManyWithWhereWithoutFileInput | Prisma.FileRolePermissionUpdateManyWithWhereWithoutFileInput[]
  deleteMany?: Prisma.FileRolePermissionScalarWhereInput | Prisma.FileRolePermissionScalarWhereInput[]
}

export type FileRolePermissionCreateNestedManyWithoutRoleInput = {
  create?: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutRoleInput, Prisma.FileRolePermissionUncheckedCreateWithoutRoleInput> | Prisma.FileRolePermissionCreateWithoutRoleInput[] | Prisma.FileRolePermissionUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.FileRolePermissionCreateOrConnectWithoutRoleInput | Prisma.FileRolePermissionCreateOrConnectWithoutRoleInput[]
  createMany?: Prisma.FileRolePermissionCreateManyRoleInputEnvelope
  connect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
}

export type FileRolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
  create?: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutRoleInput, Prisma.FileRolePermissionUncheckedCreateWithoutRoleInput> | Prisma.FileRolePermissionCreateWithoutRoleInput[] | Prisma.FileRolePermissionUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.FileRolePermissionCreateOrConnectWithoutRoleInput | Prisma.FileRolePermissionCreateOrConnectWithoutRoleInput[]
  createMany?: Prisma.FileRolePermissionCreateManyRoleInputEnvelope
  connect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
}

export type FileRolePermissionUpdateManyWithoutRoleNestedInput = {
  create?: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutRoleInput, Prisma.FileRolePermissionUncheckedCreateWithoutRoleInput> | Prisma.FileRolePermissionCreateWithoutRoleInput[] | Prisma.FileRolePermissionUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.FileRolePermissionCreateOrConnectWithoutRoleInput | Prisma.FileRolePermissionCreateOrConnectWithoutRoleInput[]
  upsert?: Prisma.FileRolePermissionUpsertWithWhereUniqueWithoutRoleInput | Prisma.FileRolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
  createMany?: Prisma.FileRolePermissionCreateManyRoleInputEnvelope
  set?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  disconnect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  delete?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  connect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  update?: Prisma.FileRolePermissionUpdateWithWhereUniqueWithoutRoleInput | Prisma.FileRolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
  updateMany?: Prisma.FileRolePermissionUpdateManyWithWhereWithoutRoleInput | Prisma.FileRolePermissionUpdateManyWithWhereWithoutRoleInput[]
  deleteMany?: Prisma.FileRolePermissionScalarWhereInput | Prisma.FileRolePermissionScalarWhereInput[]
}

export type FileRolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
  create?: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutRoleInput, Prisma.FileRolePermissionUncheckedCreateWithoutRoleInput> | Prisma.FileRolePermissionCreateWithoutRoleInput[] | Prisma.FileRolePermissionUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.FileRolePermissionCreateOrConnectWithoutRoleInput | Prisma.FileRolePermissionCreateOrConnectWithoutRoleInput[]
  upsert?: Prisma.FileRolePermissionUpsertWithWhereUniqueWithoutRoleInput | Prisma.FileRolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
  createMany?: Prisma.FileRolePermissionCreateManyRoleInputEnvelope
  set?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  disconnect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  delete?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  connect?: Prisma.FileRolePermissionWhereUniqueInput | Prisma.FileRolePermissionWhereUniqueInput[]
  update?: Prisma.FileRolePermissionUpdateWithWhereUniqueWithoutRoleInput | Prisma.FileRolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
  updateMany?: Prisma.FileRolePermissionUpdateManyWithWhereWithoutRoleInput | Prisma.FileRolePermissionUpdateManyWithWhereWithoutRoleInput[]
  deleteMany?: Prisma.FileRolePermissionScalarWhereInput | Prisma.FileRolePermissionScalarWhereInput[]
}

export type FileRolePermissionCreateWithoutFileInput = {
  grantedAt?: Date | string
  grantedBy: string
  role: Prisma.RoleCreateNestedOneWithoutFilePermissionsInput
}

export type FileRolePermissionUncheckedCreateWithoutFileInput = {
  roleName: string
  grantedAt?: Date | string
  grantedBy: string
}

export type FileRolePermissionCreateOrConnectWithoutFileInput = {
  where: Prisma.FileRolePermissionWhereUniqueInput
  create: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutFileInput, Prisma.FileRolePermissionUncheckedCreateWithoutFileInput>
}

export type FileRolePermissionCreateManyFileInputEnvelope = {
  data: Prisma.FileRolePermissionCreateManyFileInput | Prisma.FileRolePermissionCreateManyFileInput[]
  skipDuplicates?: boolean
}

export type FileRolePermissionUpsertWithWhereUniqueWithoutFileInput = {
  where: Prisma.FileRolePermissionWhereUniqueInput
  update: Prisma.XOR<Prisma.FileRolePermissionUpdateWithoutFileInput, Prisma.FileRolePermissionUncheckedUpdateWithoutFileInput>
  create: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutFileInput, Prisma.FileRolePermissionUncheckedCreateWithoutFileInput>
}

export type FileRolePermissionUpdateWithWhereUniqueWithoutFileInput = {
  where: Prisma.FileRolePermissionWhereUniqueInput
  data: Prisma.XOR<Prisma.FileRolePermissionUpdateWithoutFileInput, Prisma.FileRolePermissionUncheckedUpdateWithoutFileInput>
}

export type FileRolePermissionUpdateManyWithWhereWithoutFileInput = {
  where: Prisma.FileRolePermissionScalarWhereInput
  data: Prisma.XOR<Prisma.FileRolePermissionUpdateManyMutationInput, Prisma.FileRolePermissionUncheckedUpdateManyWithoutFileInput>
}

export type FileRolePermissionScalarWhereInput = {
  AND?: Prisma.FileRolePermissionScalarWhereInput | Prisma.FileRolePermissionScalarWhereInput[]
  OR?: Prisma.FileRolePermissionScalarWhereInput[]
  NOT?: Prisma.FileRolePermissionScalarWhereInput | Prisma.FileRolePermissionScalarWhereInput[]
  fileId?: Prisma.UuidFilter<"FileRolePermission"> | string
  roleName?: Prisma.StringFilter<"FileRolePermission"> | string
  grantedAt?: Prisma.DateTimeFilter<"FileRolePermission"> | Date | string
  grantedBy?: Prisma.StringFilter<"FileRolePermission"> | string
}

export type FileRolePermissionCreateWithoutRoleInput = {
  grantedAt?: Date | string
  grantedBy: string
  file: Prisma.FileCreateNestedOneWithoutPermissionsInput
}

export type FileRolePermissionUncheckedCreateWithoutRoleInput = {
  fileId: string
  grantedAt?: Date | string
  grantedBy: string
}

export type FileRolePermissionCreateOrConnectWithoutRoleInput = {
  where: Prisma.FileRolePermissionWhereUniqueInput
  create: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutRoleInput, Prisma.FileRolePermissionUncheckedCreateWithoutRoleInput>
}

export type FileRolePermissionCreateManyRoleInputEnvelope = {
  data: Prisma.FileRolePermissionCreateManyRoleInput | Prisma.FileRolePermissionCreateManyRoleInput[]
  skipDuplicates?: boolean
}

export type FileRolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
  where: Prisma.FileRolePermissionWhereUniqueInput
  update: Prisma.XOR<Prisma.FileRolePermissionUpdateWithoutRoleInput, Prisma.FileRolePermissionUncheckedUpdateWithoutRoleInput>
  create: Prisma.XOR<Prisma.FileRolePermissionCreateWithoutRoleInput, Prisma.FileRolePermissionUncheckedCreateWithoutRoleInput>
}

export type FileRolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
  where: Prisma.FileRolePermissionWhereUniqueInput
  data: Prisma.XOR<Prisma.FileRolePermissionUpdateWithoutRoleInput, Prisma.FileRolePermissionUncheckedUpdateWithoutRoleInput>
}

export type FileRolePermissionUpdateManyWithWhereWithoutRoleInput = {
  where: Prisma.FileRolePermissionScalarWhereInput
  data: Prisma.XOR<Prisma.FileRolePermissionUpdateManyMutationInput, Prisma.FileRolePermissionUncheckedUpdateManyWithoutRoleInput>
}

export type FileRolePermissionCreateManyFileInput = {
  roleName: string
  grantedAt?: Date | string
  grantedBy: string
}

export type FileRolePermissionUpdateWithoutFileInput = {
  grantedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grantedBy?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.RoleUpdateOneRequiredWithoutFilePermissionsNestedInput
}

export type FileRolePermissionUncheckedUpdateWithoutFileInput = {
  roleName?: Prisma.StringFieldUpdateOperationsInput | string
  grantedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grantedBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FileRolePermissionUncheckedUpdateManyWithoutFileInput = {
  roleName?: Prisma.StringFieldUpdateOperationsInput | string
  grantedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grantedBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FileRolePermissionCreateManyRoleInput = {
  fileId: string
  grantedAt?: Date | string
  grantedBy: string
}

export type FileRolePermissionUpdateWithoutRoleInput = {
  grantedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grantedBy?: Prisma.StringFieldUpdateOperationsInput | string
  file?: Prisma.FileUpdateOneRequiredWithoutPermissionsNestedInput
}

export type FileRolePermissionUncheckedUpdateWithoutRoleInput = {
  fileId?: Prisma.StringFieldUpdateOperationsInput | string
  grantedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grantedBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FileRolePermissionUncheckedUpdateManyWithoutRoleInput = {
  fileId?: Prisma.StringFieldUpdateOperationsInput | string
  grantedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grantedBy?: Prisma.StringFieldUpdateOperationsInput | string
}



export type FileRolePermissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  fileId?: boolean
  roleName?: boolean
  grantedAt?: boolean
  grantedBy?: boolean
  file?: boolean | Prisma.FileDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fileRolePermission"]>

export type FileRolePermissionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  fileId?: boolean
  roleName?: boolean
  grantedAt?: boolean
  grantedBy?: boolean
  file?: boolean | Prisma.FileDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fileRolePermission"]>

export type FileRolePermissionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  fileId?: boolean
  roleName?: boolean
  grantedAt?: boolean
  grantedBy?: boolean
  file?: boolean | Prisma.FileDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fileRolePermission"]>

export type FileRolePermissionSelectScalar = {
  fileId?: boolean
  roleName?: boolean
  grantedAt?: boolean
  grantedBy?: boolean
}

export type FileRolePermissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"fileId" | "roleName" | "grantedAt" | "grantedBy", ExtArgs["result"]["fileRolePermission"]>
export type FileRolePermissionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  file?: boolean | Prisma.FileDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}
export type FileRolePermissionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  file?: boolean | Prisma.FileDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}
export type FileRolePermissionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  file?: boolean | Prisma.FileDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}

export type $FileRolePermissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FileRolePermission"
  objects: {
    file: Prisma.$FilePayload<ExtArgs>
    role: Prisma.$RolePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    fileId: string
    roleName: string
    grantedAt: Date
    grantedBy: string
  }, ExtArgs["result"]["fileRolePermission"]>
  composites: {}
}

export type FileRolePermissionGetPayload<S extends boolean | null | undefined | FileRolePermissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload, S>

export type FileRolePermissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FileRolePermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FileRolePermissionCountAggregateInputType | true
  }

export interface FileRolePermissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileRolePermission'], meta: { name: 'FileRolePermission' } }
  /**
   * Find zero or one FileRolePermission that matches the filter.
   * @param {FileRolePermissionFindUniqueArgs} args - Arguments to find a FileRolePermission
   * @example
   * // Get one FileRolePermission
   * const fileRolePermission = await prisma.fileRolePermission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FileRolePermissionFindUniqueArgs>(args: Prisma.SelectSubset<T, FileRolePermissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FileRolePermissionClient<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FileRolePermission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FileRolePermissionFindUniqueOrThrowArgs} args - Arguments to find a FileRolePermission
   * @example
   * // Get one FileRolePermission
   * const fileRolePermission = await prisma.fileRolePermission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FileRolePermissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FileRolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FileRolePermissionClient<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FileRolePermission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileRolePermissionFindFirstArgs} args - Arguments to find a FileRolePermission
   * @example
   * // Get one FileRolePermission
   * const fileRolePermission = await prisma.fileRolePermission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FileRolePermissionFindFirstArgs>(args?: Prisma.SelectSubset<T, FileRolePermissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__FileRolePermissionClient<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FileRolePermission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileRolePermissionFindFirstOrThrowArgs} args - Arguments to find a FileRolePermission
   * @example
   * // Get one FileRolePermission
   * const fileRolePermission = await prisma.fileRolePermission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FileRolePermissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FileRolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FileRolePermissionClient<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FileRolePermissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileRolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FileRolePermissions
   * const fileRolePermissions = await prisma.fileRolePermission.findMany()
   * 
   * // Get first 10 FileRolePermissions
   * const fileRolePermissions = await prisma.fileRolePermission.findMany({ take: 10 })
   * 
   * // Only select the `fileId`
   * const fileRolePermissionWithFileIdOnly = await prisma.fileRolePermission.findMany({ select: { fileId: true } })
   * 
   */
  findMany<T extends FileRolePermissionFindManyArgs>(args?: Prisma.SelectSubset<T, FileRolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FileRolePermission.
   * @param {FileRolePermissionCreateArgs} args - Arguments to create a FileRolePermission.
   * @example
   * // Create one FileRolePermission
   * const FileRolePermission = await prisma.fileRolePermission.create({
   *   data: {
   *     // ... data to create a FileRolePermission
   *   }
   * })
   * 
   */
  create<T extends FileRolePermissionCreateArgs>(args: Prisma.SelectSubset<T, FileRolePermissionCreateArgs<ExtArgs>>): Prisma.Prisma__FileRolePermissionClient<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FileRolePermissions.
   * @param {FileRolePermissionCreateManyArgs} args - Arguments to create many FileRolePermissions.
   * @example
   * // Create many FileRolePermissions
   * const fileRolePermission = await prisma.fileRolePermission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FileRolePermissionCreateManyArgs>(args?: Prisma.SelectSubset<T, FileRolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FileRolePermissions and returns the data saved in the database.
   * @param {FileRolePermissionCreateManyAndReturnArgs} args - Arguments to create many FileRolePermissions.
   * @example
   * // Create many FileRolePermissions
   * const fileRolePermission = await prisma.fileRolePermission.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FileRolePermissions and only return the `fileId`
   * const fileRolePermissionWithFileIdOnly = await prisma.fileRolePermission.createManyAndReturn({
   *   select: { fileId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FileRolePermissionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FileRolePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FileRolePermission.
   * @param {FileRolePermissionDeleteArgs} args - Arguments to delete one FileRolePermission.
   * @example
   * // Delete one FileRolePermission
   * const FileRolePermission = await prisma.fileRolePermission.delete({
   *   where: {
   *     // ... filter to delete one FileRolePermission
   *   }
   * })
   * 
   */
  delete<T extends FileRolePermissionDeleteArgs>(args: Prisma.SelectSubset<T, FileRolePermissionDeleteArgs<ExtArgs>>): Prisma.Prisma__FileRolePermissionClient<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FileRolePermission.
   * @param {FileRolePermissionUpdateArgs} args - Arguments to update one FileRolePermission.
   * @example
   * // Update one FileRolePermission
   * const fileRolePermission = await prisma.fileRolePermission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FileRolePermissionUpdateArgs>(args: Prisma.SelectSubset<T, FileRolePermissionUpdateArgs<ExtArgs>>): Prisma.Prisma__FileRolePermissionClient<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FileRolePermissions.
   * @param {FileRolePermissionDeleteManyArgs} args - Arguments to filter FileRolePermissions to delete.
   * @example
   * // Delete a few FileRolePermissions
   * const { count } = await prisma.fileRolePermission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FileRolePermissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, FileRolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FileRolePermissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileRolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FileRolePermissions
   * const fileRolePermission = await prisma.fileRolePermission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FileRolePermissionUpdateManyArgs>(args: Prisma.SelectSubset<T, FileRolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FileRolePermissions and returns the data updated in the database.
   * @param {FileRolePermissionUpdateManyAndReturnArgs} args - Arguments to update many FileRolePermissions.
   * @example
   * // Update many FileRolePermissions
   * const fileRolePermission = await prisma.fileRolePermission.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FileRolePermissions and only return the `fileId`
   * const fileRolePermissionWithFileIdOnly = await prisma.fileRolePermission.updateManyAndReturn({
   *   select: { fileId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FileRolePermissionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FileRolePermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FileRolePermission.
   * @param {FileRolePermissionUpsertArgs} args - Arguments to update or create a FileRolePermission.
   * @example
   * // Update or create a FileRolePermission
   * const fileRolePermission = await prisma.fileRolePermission.upsert({
   *   create: {
   *     // ... data to create a FileRolePermission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FileRolePermission we want to update
   *   }
   * })
   */
  upsert<T extends FileRolePermissionUpsertArgs>(args: Prisma.SelectSubset<T, FileRolePermissionUpsertArgs<ExtArgs>>): Prisma.Prisma__FileRolePermissionClient<runtime.Types.Result.GetResult<Prisma.$FileRolePermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FileRolePermissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileRolePermissionCountArgs} args - Arguments to filter FileRolePermissions to count.
   * @example
   * // Count the number of FileRolePermissions
   * const count = await prisma.fileRolePermission.count({
   *   where: {
   *     // ... the filter for the FileRolePermissions we want to count
   *   }
   * })
  **/
  count<T extends FileRolePermissionCountArgs>(
    args?: Prisma.Subset<T, FileRolePermissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FileRolePermissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FileRolePermission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileRolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FileRolePermissionAggregateArgs>(args: Prisma.Subset<T, FileRolePermissionAggregateArgs>): Prisma.PrismaPromise<GetFileRolePermissionAggregateType<T>>

  /**
   * Group by FileRolePermission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileRolePermissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FileRolePermissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FileRolePermissionGroupByArgs['orderBy'] }
      : { orderBy?: FileRolePermissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FileRolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FileRolePermission model
 */
readonly fields: FileRolePermissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FileRolePermission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FileRolePermissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  file<T extends Prisma.FileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FileDefaultArgs<ExtArgs>>): Prisma.Prisma__FileClient<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  role<T extends Prisma.RoleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RoleDefaultArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FileRolePermission model
 */
export interface FileRolePermissionFieldRefs {
  readonly fileId: Prisma.FieldRef<"FileRolePermission", 'String'>
  readonly roleName: Prisma.FieldRef<"FileRolePermission", 'String'>
  readonly grantedAt: Prisma.FieldRef<"FileRolePermission", 'DateTime'>
  readonly grantedBy: Prisma.FieldRef<"FileRolePermission", 'String'>
}
    

// Custom InputTypes
/**
 * FileRolePermission findUnique
 */
export type FileRolePermissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionInclude<ExtArgs> | null
  /**
   * Filter, which FileRolePermission to fetch.
   */
  where: Prisma.FileRolePermissionWhereUniqueInput
}

/**
 * FileRolePermission findUniqueOrThrow
 */
export type FileRolePermissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionInclude<ExtArgs> | null
  /**
   * Filter, which FileRolePermission to fetch.
   */
  where: Prisma.FileRolePermissionWhereUniqueInput
}

/**
 * FileRolePermission findFirst
 */
export type FileRolePermissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionInclude<ExtArgs> | null
  /**
   * Filter, which FileRolePermission to fetch.
   */
  where?: Prisma.FileRolePermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileRolePermissions to fetch.
   */
  orderBy?: Prisma.FileRolePermissionOrderByWithRelationInput | Prisma.FileRolePermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FileRolePermissions.
   */
  cursor?: Prisma.FileRolePermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileRolePermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileRolePermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FileRolePermissions.
   */
  distinct?: Prisma.FileRolePermissionScalarFieldEnum | Prisma.FileRolePermissionScalarFieldEnum[]
}

/**
 * FileRolePermission findFirstOrThrow
 */
export type FileRolePermissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionInclude<ExtArgs> | null
  /**
   * Filter, which FileRolePermission to fetch.
   */
  where?: Prisma.FileRolePermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileRolePermissions to fetch.
   */
  orderBy?: Prisma.FileRolePermissionOrderByWithRelationInput | Prisma.FileRolePermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FileRolePermissions.
   */
  cursor?: Prisma.FileRolePermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileRolePermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileRolePermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FileRolePermissions.
   */
  distinct?: Prisma.FileRolePermissionScalarFieldEnum | Prisma.FileRolePermissionScalarFieldEnum[]
}

/**
 * FileRolePermission findMany
 */
export type FileRolePermissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionInclude<ExtArgs> | null
  /**
   * Filter, which FileRolePermissions to fetch.
   */
  where?: Prisma.FileRolePermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileRolePermissions to fetch.
   */
  orderBy?: Prisma.FileRolePermissionOrderByWithRelationInput | Prisma.FileRolePermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FileRolePermissions.
   */
  cursor?: Prisma.FileRolePermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileRolePermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileRolePermissions.
   */
  skip?: number
  distinct?: Prisma.FileRolePermissionScalarFieldEnum | Prisma.FileRolePermissionScalarFieldEnum[]
}

/**
 * FileRolePermission create
 */
export type FileRolePermissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionInclude<ExtArgs> | null
  /**
   * The data needed to create a FileRolePermission.
   */
  data: Prisma.XOR<Prisma.FileRolePermissionCreateInput, Prisma.FileRolePermissionUncheckedCreateInput>
}

/**
 * FileRolePermission createMany
 */
export type FileRolePermissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FileRolePermissions.
   */
  data: Prisma.FileRolePermissionCreateManyInput | Prisma.FileRolePermissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FileRolePermission createManyAndReturn
 */
export type FileRolePermissionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * The data used to create many FileRolePermissions.
   */
  data: Prisma.FileRolePermissionCreateManyInput | Prisma.FileRolePermissionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FileRolePermission update
 */
export type FileRolePermissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionInclude<ExtArgs> | null
  /**
   * The data needed to update a FileRolePermission.
   */
  data: Prisma.XOR<Prisma.FileRolePermissionUpdateInput, Prisma.FileRolePermissionUncheckedUpdateInput>
  /**
   * Choose, which FileRolePermission to update.
   */
  where: Prisma.FileRolePermissionWhereUniqueInput
}

/**
 * FileRolePermission updateMany
 */
export type FileRolePermissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FileRolePermissions.
   */
  data: Prisma.XOR<Prisma.FileRolePermissionUpdateManyMutationInput, Prisma.FileRolePermissionUncheckedUpdateManyInput>
  /**
   * Filter which FileRolePermissions to update
   */
  where?: Prisma.FileRolePermissionWhereInput
  /**
   * Limit how many FileRolePermissions to update.
   */
  limit?: number
}

/**
 * FileRolePermission updateManyAndReturn
 */
export type FileRolePermissionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * The data used to update FileRolePermissions.
   */
  data: Prisma.XOR<Prisma.FileRolePermissionUpdateManyMutationInput, Prisma.FileRolePermissionUncheckedUpdateManyInput>
  /**
   * Filter which FileRolePermissions to update
   */
  where?: Prisma.FileRolePermissionWhereInput
  /**
   * Limit how many FileRolePermissions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FileRolePermission upsert
 */
export type FileRolePermissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionInclude<ExtArgs> | null
  /**
   * The filter to search for the FileRolePermission to update in case it exists.
   */
  where: Prisma.FileRolePermissionWhereUniqueInput
  /**
   * In case the FileRolePermission found by the `where` argument doesn't exist, create a new FileRolePermission with this data.
   */
  create: Prisma.XOR<Prisma.FileRolePermissionCreateInput, Prisma.FileRolePermissionUncheckedCreateInput>
  /**
   * In case the FileRolePermission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FileRolePermissionUpdateInput, Prisma.FileRolePermissionUncheckedUpdateInput>
}

/**
 * FileRolePermission delete
 */
export type FileRolePermissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionInclude<ExtArgs> | null
  /**
   * Filter which FileRolePermission to delete.
   */
  where: Prisma.FileRolePermissionWhereUniqueInput
}

/**
 * FileRolePermission deleteMany
 */
export type FileRolePermissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FileRolePermissions to delete
   */
  where?: Prisma.FileRolePermissionWhereInput
  /**
   * Limit how many FileRolePermissions to delete.
   */
  limit?: number
}

/**
 * FileRolePermission without action
 */
export type FileRolePermissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileRolePermission
   */
  select?: Prisma.FileRolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileRolePermission
   */
  omit?: Prisma.FileRolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileRolePermissionInclude<ExtArgs> | null
}
